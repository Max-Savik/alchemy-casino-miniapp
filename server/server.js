const express = require('express');
const http    = require('http');
const { Server } = require('socket.io');

const PORT = process.env.PORT || 3000;

const app = express();
app.use(express.static(__dirname));   // üìÇ –æ—Ç–¥–∞–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã —ç—Ç–æ–π –ø–∞–ø–∫–∏
const httpServer = http.createServer(app);
const io = new Server(httpServer, { cors: { origin: '*' } });   // * dev-—Ä–µ–∂–∏–º

// 1Ô∏è‚É£ –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (start ‚Üí countdown ‚Üí spin ‚Üí reset)
let game = {
  players: [],        // [{ name, value, color, nfts: [ {id, img, price} ] }]
  totalUSD: 0,
  phase: 'waiting',   // waiting ‚Üí countdown ‚Üí spinning
  endsAt: null        // timestamp –∫–æ–Ω—Ü–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
};

// 2Ô∏è‚É£ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function weightedPick() {
  const ticket = Math.random() * game.totalUSD;
  let acc = 0;
  for (const p of game.players) {
    acc += p.value;
    if (ticket <= acc) return p;
  }
  return game.players.at(-1);
}

function resetRound() {
  game = { players: [], totalUSD: 0, phase: 'waiting', endsAt: null };
  io.emit('state', game);
}

// 3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ (45 —Å–µ–∫) –ø—Ä–∏ ‚â• 2 –∏–≥—Ä–æ–∫–∞—Ö
function maybeStartCountdown() {
  if (game.phase !== 'waiting' || game.players.length < 2) return;
  game.phase  = 'countdown';
  game.endsAt = Date.now() + 45_000; // ‚Üê 45 000 –º—Å –≤–º–µ—Å—Ç–æ 60 000
  io.emit('countdownStart', { endsAt: game.endsAt });

  const timer = setInterval(() => {
    const rest = game.endsAt - Date.now();
    if (rest <= 0) {
      clearInterval(timer);
      startSpin();
    } else {
      io.emit('countdownTick', { remaining: rest });
    }
  }, 1000);
}

// 4Ô∏è‚É£ –ö—Ä—É—Ç–∏–ª–∫–∞
function startSpin() {
  game.phase = 'spinning';
  const winner = weightedPick();
  // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–ø–∏–Ω–∞ –æ—Ç–¥–∞–µ–º –∏ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  io.emit('spinStart', { players: game.players, winner });

  // –ß–µ—Ä–µ–∑ 6 —Å–µ–∫ ‚Äî –∫–∏–¥–∞–µ–º spinEnd –∏ –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –ø–∞—É–∑—ã —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞—É–Ω–¥
  setTimeout(() => {
    io.emit('spinEnd', { winner, total: game.totalUSD });

    // –î–∞–µ–º —Ñ—Ä–æ–Ω—Ç—É ~3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–∫–∞–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞ "highlightWinner"
    setTimeout(() => {
      resetRound();
    }, 3000);

  }, 6000); // —Å—Ç–æ–ª—å–∫–æ –∂–µ, —Å–∫–æ–ª—å–∫–æ –∞–Ω–∏–º–∞—Ü–∏—è GSAP –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
}

// 5Ô∏è‚É£ –°–µ—Ä–¥—Ü–µ: –ø—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫
io.on('connection', socket => {
  socket.emit('state', game);               // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É —Ç–µ–∫—É—â–µ–µ

  socket.on('placeBet', ({ name, nfts }) => {
    // nfts: [ {id, price, img} ]
    let player = game.players.find(p => p.name === name);
    if (!player) {
      const palette = ['#fee440','#d4af37','#8ac926','#1982c4','#ffca3a','#6a4c93','#d79a59','#218380'];
      player = {
        name,
        value: 0,
        color: palette[game.players.length % palette.length],
        nfts: []   // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–∏–Ω–∏—è –∏–º–µ–Ω–Ω–æ —Ç–µ—Ö NFT (id+img+price)
      };
      game.players.push(player);
    }

    // –°—É–º–º–∏—Ä—É–µ–º value –∏ totalUSD, –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π NFT –≤ player.nfts
    const added = nfts.reduce((s,x) => s + x.price, 0);
    player.value += added;
    game.totalUSD += added;
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ player.nfts (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Ä–∞–∑–Ω—ã–µ —Ä–∞—É–Ω–¥—ã)
    nfts.forEach(x => {
      player.nfts.push({ id: x.id, img: x.img, price: x.price });
    });

    io.emit('state', game);     // —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º
    maybeStartCountdown();      // –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä–∞ –Ω–∞—á–∞—Ç—å —Ç–∞–π–º–µ—Ä
  });
});

httpServer.listen(PORT, () => console.log('Jackpot server on', PORT));
