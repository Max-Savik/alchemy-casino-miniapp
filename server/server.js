// server.js
const express = require('express');
const http    = require('http');
const { Server } = require('socket.io');

const PORT = process.env.PORT || 3000;

const app = express();
app.use(express.static(__dirname));   // üìÇ –æ—Ç–¥–∞–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã —ç—Ç–æ–π –ø–∞–ø–∫–∏
const httpServer = http.createServer(app);
const io = new Server(httpServer, { cors: { origin: '*' } });   // * dev-—Ä–µ–∂–∏–º

// 1Ô∏è‚É£ –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (start ‚Üí countdown ‚Üí spin ‚Üí reset)
let game = {
  players: [],        // [{name,value,color}]
  totalUSD: 0,
  phase: 'waiting',   // waiting ‚Üí countdown ‚Üí spinning
  endsAt: null        // timestamp –∫–æ–Ω—Ü–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞
};

// 2Ô∏è‚É£ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function weightedPick() {
  const ticket = Math.random() * game.totalUSD;
  let acc = 0;
  for (const p of game.players) { acc += p.value; if (ticket <= acc) return p; }
  return game.players.at(-1);
}
function resetRound() {
  game = { players: [], totalUSD: 0, phase: 'waiting', endsAt: null };
  io.emit('state', game);
}

// 3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ (60 —Å) –ø—Ä–∏ ‚â• 2 –∏–≥—Ä–æ–∫–∞—Ö
function maybeStartCountdown() {
  if (game.phase !== 'waiting' || game.players.length < 2) return;
  game.phase  = 'countdown';
  game.endsAt = Date.now() + 60_000;
  io.emit('countdownStart', { endsAt: game.endsAt });

  const timer = setInterval(() => {
    const rest = game.endsAt - Date.now();
    if (rest <= 0) { clearInterval(timer); startSpin(); }
    else           { io.emit('countdownTick', { remaining: rest }); }
  }, 1000);
}

// 4Ô∏è‚É£ –ö—Ä—É—Ç–∏–ª–∫–∞
function startSpin() {
  game.phase = 'spinning';
  const winner = weightedPick();
  io.emit('spinStart', { players: game.players, winner });

  setTimeout(() => {
    io.emit('spinEnd', { winner, total: game.totalUSD });
    resetRound();
  }, 6000);                   // —Å—Ç–æ–ª—å–∫–æ –∂–µ, —Å–∫–æ–ª—å–∫–æ –∞–Ω–∏–º–∞—Ü–∏—è GSAP –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
}

// 5Ô∏è‚É£ –°–µ—Ä–¥—Ü–µ: –ø—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫
io.on('connection', socket => {
  socket.emit('state', game);               // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∫–ª–∞–¥–∫–µ —Ç–µ–∫—É—â–µ–µ

  socket.on('placeBet', ({ name, nfts }) => {
    // nfts: [{id,price}] ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    let player = game.players.find(p => p.name === name);
    if (!player) {
      const palette = ['#fee440','#d4af37','#8ac926','#1982c4','#ffca3a','#6a4c93','#d79a59','#218380'];
      player = { name, value: 0, color: palette[game.players.length % palette.length] };
      game.players.push(player);
    }
    const added = nfts.reduce((s,x) => s + x.price, 0);
    player.value += added;
    game.totalUSD += added;

    io.emit('state', game);                 // —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    maybeStartCountdown();                  // –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –ø–æ—Ä–∞
  });
});

httpServer.listen(PORT, () => console.log('Jackpot server on', PORT));
